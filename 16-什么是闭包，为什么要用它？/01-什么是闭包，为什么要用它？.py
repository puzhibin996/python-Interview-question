


# python中闭包（Closure）是一种特殊的函数，他可以记住并访问在其外部作用域中定义的变量，即时在外部函数已经执行完毕后依然可以访问。
# 简而言之，闭包就是能够读取其它函数内部变量的函数。
# 当函数被定义在一个外出函数中，并且在返回时保留了对外出函数局部变量的引用，这就形成了一个闭包。

def outer_function(x):
    def inner_function(y):
        return x+y
    return inner_function

closure = outer_function(10)
print(closure(5))

# 在上面代码中 outer_function返回了 inner_function，并且inner_function可以访问outer_function中的变量x，即时outer_function已经执行完毕。
# 这里inner_function就是一个闭包。

# 为什么要用闭包
# 闭包有几个重要的用途
# 封装和数据隐藏：
# 闭包可以封装状态，并且这些状态对外部不可见的，这可以实现类似面向对象编程中的私有属性和方法，提高代码的安全性和封装性。
# 持久化状态：
# 闭包允许函数记住和访问在其定义时的局部变量，即时这些变量原本应该是短暂存在的。
# 这使得函数可以维持一个持久化的状态，而不必通过全局变量或其它方式显示管理状态。
# 工厂函数：
# 闭包可以作为工厂函数，根据传入的参数生成具有不同行为的函数。在上面的例子中，outer_function就是一个工厂函数，他根据传入的x值生成不同的inner_function。
# 延迟计算：
# 闭包可以实现延迟计算，即在函数被调用时才进行计算，而不是在定义时。这在处理资源密集操作时很有用，可以提高程序的效率和响应性。
# 装饰器：
# 闭包是python装饰器的基础，装饰器本质上是一个接受函数作为参数并返回一个新函数的函数，这个函数通常会再调用原函数之前或之后执行一些额外的逻辑。
# 装饰器的实现通常依赖于闭包。

# 闭包的注意事项：
# 虽然闭包提供了强大的功能，但使用不当可能会导致一些问题，如内存泄漏（如果闭包引用了不再需要的大对象）或者变量遮蔽（如果闭包中的变量与外部作用域的变量同名）。
# 因此，在使用闭包时，需要注意管理好内部状态和引用，避免不必要的资源消耗。
# 闭包是python高级编程的一个重要概念，掌握它可以帮助你写出更灵活、更高效的代码。
