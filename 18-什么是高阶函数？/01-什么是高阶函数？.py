



# 高阶函数（Higher-Order Function）是指至少满足一下条件之一的函数：
# 1.接受一个或多个函数作为参数
# 2.返回一个函数作为结果
# 高阶函数式函数式编程中的一个重要概念，它允许你将函数作为数据来处理，就像处理其它类型的对象一样。
# 这种能力极大地增强了python的灵活性和表达力，使得编写更简洁，更具抽象性的代码成为可能。


### 接受函数作为参数
# 一个典型的例子是map（）函数，他接受一个函数和一个序列，将函数应用于序列中的每一个元素，并返回一个新的序列。

# 定义一个简单的函数
def square(x):
    return x*x
# 使用map（）函数将square函数应用于一个列表
numbers = [1,2,3,4,5]
squares = map(square,numbers)
# 将map对象转换为列表
print(list(squares))

### 返回函数作为结果
# 另一个例子是闭包，其中函数返回另一个函数，这个内部函数可以访问外部函数的局部变量。
def make_adder(n):
    def add(x):
        return x+n
    return add
# 创建一个具体的adder函数，它将加上5
add_five = make_adder(5)
# 使用adder函数
print(add_five(10))


## 高阶函数的用途
# 高阶函数在python中有着广泛的应用，包括但不限于：
# 1.数据处理：使用map（）、filter（）、reduce（）等函数来处理数据
# 2.函数式编程：利用高阶函数和lambda表达式来编写简洁的函数式风格的代码
# 3.抽象和通用性：高阶函数允许你编写更通用的代码，通过参数化函数来处理各种不同的情况。
# 4.装饰器：装饰器本质上是高阶函数，他们接收一个函数作为输入，并返回一个新的函数，通常会添加额外的功能或修改原有的函数的行为。
# 5.函数组合：通过组合多个函数来构建更复杂的逻辑，例如使用compose函数来串联多个函数。

# 高阶函数的意义：
# 高阶函数不仅提供了强大的工具来处理数据和抽象逻辑，还促进了代码的可读性和可维护性。

