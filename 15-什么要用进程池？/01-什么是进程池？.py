import os
import time
from multiprocessing import Pool


# 在python中 multiprocessing.Pool 是一个用于并执行任务的类，它属于multiprocessing模块的一部分。
# 进程池允许你创建一组工作进程，这些进程可以并行地执行任务，而无需为每个任务单独创建和销毁进程，从而提高了效率

# 进程池的作用
# 资源管理：
# 进程池可以限制同事运行的进程数量，避免过多的进程消耗系统资源。他负责创建和销毁进程，管理进程的生命周期。
# 并行处理：
# 进程池可以并行处理任务，利用多核处理器的优势，加速计算密集型任务的执行。
# 异步执行：
# 进程池可以一步执行任务，即任务提交后立即返回，无需等待任务完成，这有助于改善程序的效应时间和性能。
# 任务队列：
# 进程池内部维护了一个任务队列，可以按照先进先出（FIFO）原则分配任务给空闲的进程执行。
# 错误处理：
# 进程池可以捕捉子进程中的异常，并将异常信息传递回主进程，便于错误处理和调试。


# 为什么要用进程池
# 效率提升：
# 进程池减少了创建和销毁的开销，因为创建和销毁进程是昂贵的操作。通过重用已存在的进程，可以显著提高执行大量短任务的效率。
# 资源控制：
# 通过限制最大并发进程数，可以防止过度消耗系统资源，避免系统因资源耗尽而变得不稳定。
# 简化并行编程：
# 进程池提供了一个高级的接口，使得并行编程变得更加简单和直观，程序元可以专注于任务的定义，而不用关心底层的并行执行细节。
# 异步和非阻塞性质：
# 进程池的异步执行特性使得程序可以继续执行其它任务，而不是等待所有并行任务完成，这对于构建响应式和高效的应用程序至关重要。


def work(num):
    print(f"working {num}(PID:{os.getpid()})")
    time.sleep(2)
    return num*num


if __name__ == "__main__":
    with Pool(processes=4)as pool:
        results = pool.map(work,range(10))
    print(results)

# 上面代码创建了四个进程的进程池，并使用map方法将work函数应用到一系列数值上。
# map方法会等待所有任务完成并返回结果列表。通过使用进程池，我们可以并行执行这些任务，从而加快整体的执行速度。
