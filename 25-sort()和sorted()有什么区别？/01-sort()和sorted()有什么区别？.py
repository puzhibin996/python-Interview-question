





# 在python中 sort（）和sorted（） 都可以用来对序列进行排序，但他们之间有几个重要的区别

# 1.方法类型：
# sort（） 是列表list的一个内部方法，只能用于列表对象。
# sorted（） 是一个内置函数，可以作用于任何迭代对象（如列表、元组、集合等）
# 2.返回值：
# sort（）方法会直接修改原列表，并按照制定的方式进行排序。他没有返回值（返回None），只是改变了列表本身
# sorted（）函数不会改变原始 可迭代对象，而是返回一个新的已排序列表。

# 使用示例
# 使用sort（）
numbers = [5,1,2,3,4,5,99]
numbers.sort()
print(numbers)

# 使用sorted（）
numbers1 = [2,653,221,2,4,5,6,23,45,621,6]
sorted_numbers = sorted(numbers1)
print(sorted_numbers)

# 参数：
# 两者都支持key参数来制定一个函数以制定排序规则，以及reverse参数来控制排序的方向（升序或降序。）
# sort（）和sorted（）在参数方面基本一致，但在使用上略有不同。例如，sorted（）可以接受一个额外的cmp参数在python2中，但这个参数在python3中移除。

# 灵活性
# 因为sorted（） 返回新的列表，所以在需要保留原始数据时非常有用。同事也可以对非列表类型的可迭代对象进行排序。
# sort（）更适用于就地排序且不需要保留原始数据情况

# 如果你只需要对列表进行排序，并且不关心原始列表的顺序，可以使用 sort()。
# 如果你需要对其他类型的可迭代对象进行排序，或者你需要保留原始数据并获得一个排序后的副本，那么你应该使用 sorted()。